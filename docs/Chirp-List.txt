ALL CHIRP COMMANDS

These are all of the chirp commands; This info is taken from the Pixy2 firmware source code.
NOTE: All commands, except where noted, output one int32.

Some commands take a "fourcc" code (i.e. 'TEXT', 'PNT1', etc.). This needs to be investigated.

Camera:

- cam_setMode
    in: (int8 mode)
    "Set camera mode"
    "@p mode 0=25 FPS, 1280x800; 1=50 FPS, 640x400"
    "@r 0 if success, negative if error"

- cam_getMode
    in: ()
    "Get camera mode"
    "@r mode value"

- cam_setAWB
    in: (int8 enable)
    "Enable/disable Auto White Balance (AWB)" 
    "@p enable (bool) 0=disable, 1=enable"
    "@r 0 if success, negative if error"

- cam_getAWB
    in: ()
    "Get Auto White Balance (AWB) enable"
    "@r (bool) enable value"

- cam_setWBV
    in: (int32 wbv)
    "Set White Balance Value (WBV)"
    "@p wbv white balance value"
    "@r 0 if success, negative if error"

- cam_getWBV
    in: ()
    "Get White Balance Value (WBV)"
    "@r white balance value"

- cam_setAEC
    in: (int8 enable)
    "Set Auto Exposure Compensation (AEC)"
    "@p enable (bool) 0=disable, 1=enable"
    "@r 0 if success, negative if error"

- cam_getAEC
    in: ()
    "Get Auto Exposure Compensation (AEC)"
    "@r (bool) enable value"

- cam_setECV
    in: (int32 ecv)
    "Set Exposure Compensation Value (ECV)"
    "@p exposure compensation value"
    "@r 0 if success, negative if error"

- cam_getECV
    in: ()
    "Get Exposure Compensation Value (ECV)"
    "@r exposure compensation value"

- cam_setBrightness
    in: (int8 brightness)
    "Set brightness value to increase or decrease exposure (only applies when AEC is enabled)"
    "@p brightness value between 0 and 255"
    "@r 0 if success, negative if error"

- cam_getBrightness
    in: ()
    "Get brightness value"
    "@r brightness value"

- cam_setSaturation
    in: (int8 saturation)
    "Set color saturation value"
    "@p saturation value between 0 and 255"
    "@r 0 if success, negative if error"

- cam_setFlickerAvoidance
    in: (int8 enable)
    "Set flicker avoidance"
    "@p enable (0) disabled (1) enabled"
    "@r 0 if success, negative if error"

- cam_testPattern
    in: (int8 enable)
    "Set test pattern display"
    "@p enable (0) normal mode (1) test pattern"
    "@r always returns 0"

- cam_getFrame
    in: (int8 mode, int16 xOffset, int16 yOffset, int16 width, int16 height)
    out: (int32 response, uint32 fourcc, uint8 renderflags, uint16 width, uint16 height, uint8[] frame)
    "Get a frame from the camera"
    "@p mode one of the following CAM_GRAB_M0R0 (0x00), CAM_GRAB_M1R1 (0x11), CAM_GRAB_M1R2 (0x21)"
    "@p xOffset x offset counting from left"
    "@p yOffset y offset counting from top"
    "@p width width of frame"
    "@p height height of frame"
    "@r 0 if success, negative if error"
    "@r BA81 formatted data"

- cam_setReg8
    in: (int16 address, int8 value)
    "Write an 8-bit SCCB register value on the camera chip"
    "@p address register address"
    "@p value register value to set"
    "@r 0 if success, negative if error"

- cam_setReg16
    in: (int16 address, int16 value)
    "Write an 16-bit SCCB register value on the camera chip"
    "@p address register address"
    "@p value register value to set"
    "@r 0 if success, negative if error"

- cam_setReg32
    in: (int16 address, int32 value)
    "Write an 32-bit SCCB register value on the camera chip"
    "@p address register address"
    "@p value register value to set"
    "@r 0 if success, negative if error"

- cam_getReg8
    in: (int16 address)
    "Read an 8-bit SCCB register value on the camera chip"
    "@p address register address"
    "@r 0 register value"

- cam_getReg16
    in: (int16 address)
    "Read an 16-bit SCCB register value on the camera chip"
    "@p address register address"
    "@r 0 register value"

- cam_getReg32
    in: (int16 address)
    "Read an 32-bit SCCB register value on the camera chip"
    "@p address register address"
    "@r 0 register value"

- cam_getFramePeriod
    in: ()
    "Return M0 frame period measured and updated after each frame grab"
    "@r frame period in microseconds"

- cam_getBlankTime
    in: ()
    "Return M0 blanking time measured and updated after each frame grab"
    "@r blank time in microseconds"

LED:

- led_set
    in: (int32 color)
    "Set RGB LED values"
    "@p color 24-bit value with red=bits 16-23, green=bits 8-15, blue=bits 0-7"
    "@r 0 if success, negative if error"

- led_setRGB
    in: (int8 red, int8 green, int8 blue)
    "Set RGB LED values"
    "@p red value ranging from 0-255"
    "@p green value ranging from 0-255"
    "@p blue value ranging from 0-255"
    "@r 0 if success, negative if error"

- led_setMaxCurrent
    in: (int32 current)
    "Set maximum current each RGB LED, can be used to limit brightness"
    "@p current current value in microamps, ranging from 0 to 20000"
    "@r 0 if success, negative if error"

- led_getMaxCurrent
    in: ()
    "Get maximum current each RGB LED, can be used to limit brightness"
    "@r max curent (sic) in microamperes"

- led_setLamp
    in: (int8 upper, int8 lower)
    "Set the state of the lamp illumination LEDs"
    "@p upper state of upper LEDs, 0 is off, nonzero is fully on"
    "@p lower state of lower LED, 0 is off, nonzero is fully on"
    "@r 0 if success, negative if error"

Parameters:

- prm_restore
    in: ()
    "Erase all parameters and restore to default values"
    "@r 0 if success, negative if error"

- prm_set
    in: (string identifier, int8[] value)
    "Set parameter value"
    "@p identifier name of parameter (string)"
    "@p value value of parameter (encoded)"
    "@r 0 if success, negative if error"

- prm_reload
    in: ()
    "Causes all parameters to be reloaded"
    "@r 0 if success, negative if error"

- prm_setShadow
    in: (string identifier, int8[] value)
    "Set parameter's shadow value"
    "@p identifier name of parameter (string)"
    "@p value value of parameter (encoded)"
    "@r 0 if success, negative if error"

- prm_resetShadows
    in: ()
    "Reset the shadow values of all parameters"
    "@r 0 if success, negative if error"

- prm_get
    in: (string identifier)
    out: (int32 response, int8[] value)
    "Get parameter value"
    "@p identifier name of parameter (string)"
    "@r 0 if success, negative if error"

- prm_getInfo
    in: (string identifier)
    out: (int32 response, string description
    "Get parameter information"
    "@p identifier name of parameter (string)"
    "@r 0 if success, negative if error")

- prm_getAll
    in: (int8 contextual, int16 index)
    out: (int32 response, int32 flags, int32 priority, string arglist, string identifier, string description, int8[] data)
    "Get all information"
    "@p contextual if true, return only program-related parameters, if false, return all parameters"
    "@p index index of parameter"
    "@r 0 if success, negative if error"


Power:

- pwr_getVin
    in: ()
    "Get Vin (JP1) voltage"
    "@r voltage in millivolts"


Servo:

- rcs_setPos
    in: (int8 channel, int16 position)
    "Set RC-servo position"
    "@p channel value either 0 or 1 (2 possible channels)"
    "@p pos position value ranging from 0-999"
    "@r 0 if success, negative if error"

- rcs_getPos
    in: (int8 channel)
    "Get RC-servo position"
    "@p channel value either 0 or 1 (2 possible channels)"
    "@r position value of the channel ranging from 0-999, negative if error"

- rcs_enable
    in: (int8 channel, int16 enable)
    "Enable/disable RC-servo"
    "@p channel value either 0 or 1 (2 possible channels)"
    "@p enable 0=disable, nonzero=enable"
    "@r 0 if success, negative if error"

- rcs_setLimits:
    in: (int8 channel, int16 lower, int16 upper)
    "Set upper and lower limits of servo travel"
    "@p channel value either 0 or 1 (2 possible channels)"
    "@p lower value between -500 and 500. 0 is default, -500 will extend the lower limit the greatest amount."
    "@p upper value between -500 and 500. 0 is default, 500 will extend the upper limit the greatest amount."
    "@r 0 if success, negative if error"

- rcs_setFreq
    in: (int16 frequency)
    "Set the PWM frequency"
    "@p frequency value between 20 and 300. 50 is default."
    "@r 0 if success, negative if error"


CCC:

- cc_setSigRegion
    in: (int32 type, int8 signature, 'REG1' region)
    "Set signature by selecting region in image"
    "@p type 0=normal signature, 1=color code signature"
    "@p signature numerical index of signature, can be 1-7"
    "@p region user-selected region"
    "@r 0 to 100 if success where 100=good, 0=poor, negative if error"

- cc_setSigPoint
    in: (int32 type, int8 signature, 'PNT1' point)
    "Set signature by selecting point in image"
    "@p type 0=normal signature, 1=color code signature"
    "@p signature numerical index of signature, can be 1-7"
    "@p point user-selected point"
    "@r 0 to 100 if success where 100=good, 0=poor, negative if error"

- cc_clearSig
    in: (int8 signature)
    "Clear signature"
    "@p signature numerical index of signature, can be 1-7"
    "@r 0 if success, negative if error"

- cc_clearAllSig
    in: ()
    "Clear signature"
    "@r 0 if success, negative if error"

- cc_setLabel
    in: (int32 signum, string label)
    "Set label for signature or color code"
    "@p signum signature number including color-coded numbers"
    "@p label string label"
    "@r 0 if success, negative if error"

- cc_setMemory
    in: (int32 ?, int8[] ?)
    "[UNDOCUMENTED]"
    Note: From looking at the code, this appears to set an arbitrary region of device memory.
        The first argument is the address, and the array is the data to be put there.
        It is only used by PixyMon to upload a lookup table into device memory. (see cblobmodule.cpp, line 243)
        However, any portion of memory can be accessed; Security is clearly not a concern here.


Program:

- running
    in: ()
    "Is a program running?"
    "@r 1 if a program is running, 2 if running in \"forced\" state, 0 if not, also returns a status string"

- stop
    in: ()
    "Stop execution of the current program"
    "@r always returns 0"

- run
    in: ()
    "Run the current program"
    "@r returns 0 if successful, -1 otherwise"

- runProg
    in: (int8 program)
    "Run the specified program"
    "@p program number"
    "@r returns currently running program index if successful, -1 otherwise"

- runProgName
    in: (string program)
    "Run the specified program name"
    "@p program name of program"
    "@r returns 0 if successful, -1 otherwise"

- runProgDefault
    in: ()
    "Run the default program"
    "@r returns 0 if successful, -1 otherwise"

- runProgArg
    in: (int8 index, int32 argument)
    "Run the specified program with an argument"
    "@p index program index"
    "@p argument to be passed to program"
    "@r returns 0 if successful, -1 otherwise"

- getProg
    in: (int8 index)
    out: (int32 response, string name, string description)
    "Get the program name and description assocated with the index argument"
    "@p index program index"
    "@r returns 0 if valid index, 1 if index is the currently running program, -1 if index is out of range"

- getProgIndex
    in: (string name)
    "Get the program index given the program name"
    "@p name program name"
    "@r returns 0(sic) if successful, -1 otherwise"
    NOTE: Returns program index on success, not 0.

- progs:
    in: ()
    out: (int32 response, 'TEXT' data)
    "List available programs"
    "@r always returns 0"

- version
    in: ()
    out: (int32 response, uint16[] version)
    "Get firmware version"
    "@r always returns 0 and an array of 6 uint16 values: the first 3 are major, minor, and build firmware versions, the last 3 are major, minor and build hardware versions"

- versionType
    in: ()
    out: (int32 response, string type)
    "Get firmware type"
    "@r always returns 0 and a null-terminated string that describes the type of firmware"
    Note: type is always "general" or "LEGO".

- getAction
    in: (int16 action)
    out: (int32 response, string name, string description)
    "Get the action scriptlet assocated with the index argument"
    "@p action index"
    "@r returns 0 if valid index, -1 if index is out of range"

- getUID
    in: ()
    "Get the unique ID of this Pixy"
    "@r returns 32-bit unique ID"

- getView
    in: (int16 index)
    out: (int32 response, string view)
    "Get the view of the running program"
    "@p index view index"
    "@r returns 0 if valid index, 1 if index is current view, -1 if index is out of range"

- setView
    in: (int16 index)
    "Set the view of the running program"
    "@p index view index"
    "@r returns 0 if successful, -1 otherwise, or if index is out of range"

- toggleLamp
    in: ()
    "Toggle the white LEDs on and off"
    "@r returns 0 if turned off, 1 if turned on"

- printMC
    in: ()
    out: (int32 response, 'TEXT' mc)
    "Print manufacturing constants"
    "@r returns 0"


Serial:

- ser_packet
    in: (int8 type, int8[] data)
    out: (int32 response, int8[] data)
    "Send program-related sensor data based on request"
    "@p type request type identifier"
    "@p data request data"
    "@r returns 0 regardless and return data array of bytes based on request"


Flash:

- flash_sectorSize
    in: ()
    "Get size of flash sector"
    "@r sector size in bytes"

- flash_program
    in: (int32 address, int8[] data)
    "Program flash (including erasing and verifying)."
    "@p addr destination address"
    "@p data programming data"
    "@p len length of data" NOTE: Part of array.
    "@r voltage in millivolts"

- flash_reset
    in: ()
    "Reset processor (execute program)."
    "@r always returns 0"

- getHardwareVersion
    in: ()
    out: (int32 response, int16[] version)
    "Get hardware version"
	"@r returns 0 if successful, <0 otherwise"